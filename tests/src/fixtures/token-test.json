[
  [
    "Test basic tokenization.",
    "a=0((123 456)  (abc def)) -0.1",
    [
      ["token", "a", 1, 1],
      ["delimiter", "=", 1, 2],
      ["integer", "0", 1, 3],
      ["delimiter", "(", 1, 4],
      ["delimiter", "(", 1, 5],
      ["integer", "123", 1, 6],
      ["ws", " ", 1, 9],
      ["integer", "456", 1, 10],
      ["delimiter", ")", 1, 13],
      ["ws", "  ", 1, 14],
      ["delimiter", "(", 1, 16],
      ["token", "abc", 1, 17],
      ["ws", " ", 1, 20],
      ["token", "def", 1, 21],
      ["delimiter", ")", 1, 24],
      ["delimiter", ")", 1, 25],
      ["ws", " ", 1, 26],
      ["decimal", "-0.1", 1, 27]
    ],
    {
      "patterns": {
        "ws": "[ \t]+",
        "delimiter": "[\\(\\)=]",
        "decimal": "-?\\d+\\.\\d+",
        "integer": "-?\\d+",
        "token": "[\\w]+"
      }
    }
  ],
  [
    "Test end of line behaviour.",
    "a\r\n\r\n  b \r\n c\r\nd",
    [
      ["token", "a", 1, 1],
      ["ws", "\r\n\r\n  ", 1, 2],
      ["token", "b", 3, 3],
      ["ws", " \r\n ", 3, 4],
      ["token", "c", 4, 2],
      ["ws", "\r\n", 4, 3],
      ["token", "d", 5, 1]
    ],
    {
      "patterns": {
        "ws": "(?:\r\n|\r|\n| )+",
        "token": "\\w+"
      }
    }
  ],
  [
    "Test multiple refinements",
    "abc cab dog cab abc",
    [
      ["abc", "abc", 1, 1],
      ["ws", " ", 1, 4],
      ["cab", "cab", 1, 5],
      ["ws", " ", 1, 8],
      ["token", "dog", 1, 9],
      ["ws", " ", 1, 12],
      ["cab", "cab", 1, 13],
      ["ws", " ", 1, 16],
      ["abc", "abc", 1, 17]
    ],
    {
      "patterns": {
        "ws": "[ ]+",
        "token": "\\w+"
      },
      "refinements": {
        "token": {
          "abc": "[abc]+"
        },
        "abc": {
          "cab": "cab"
        }
      }
    }
  ],
  [
    "Test no patterns",
    "abc",
    [],
    {
      "syntax": true
    }
  ],
  [
    "Test unmatched token",
    "abc 123",
    [],
    {
      "syntax": true,
      "patterns": {
        "token": "[a-z]+",
        "ws": "[ ]+"
      }
    }
  ]
]
